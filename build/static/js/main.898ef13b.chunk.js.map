{"version":3,"sources":["constants/index.js","helpers/index.js","components/Button.js","components/filters/LaunchYearFilter.js","components/filters/BooleanFilter.js","components/filters/Filter.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["YEARS","useSearchParams","searchParams","useLocation","search","URLSearchParams","Button","data","filterType","history","useHistory","location","className","get","onClick","urlObj","URL","window","href","set","push","LaunchYearFilter","years","Array","fill","map","year","i","key","BooleanFilter","type","Filter","Card","links","mission_patch_small","loading","src","alt","mission_name","flight_number","mission_id","length","id","launch_year","JSON","stringify","launch_success","launch_landing","getQueryData","App","currentURL","reqObj","obj","isServer","__PRELOADED_STATE__","useState","items","url","apiData","setApiData","error","setError","queryParams","setQueryParams","useEffect","isSuccessfulLaunch","isSuccessfulLanding","createURL","urlGenerator","fetch","then","response","json","catch","fetchData","item","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","root","document","querySelector","hasChildNodes","ReactDOM","hydrate","render","process","origin","addEventListener","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.898ef13b.chunk.js","sourcesContent":["export const SPACEX_ENDPOINT = 'https://api.spacexdata.com/v3/launches?limit=100';\r\nexport const YEARS = [2006, 2021]; // [start, end]\r\nexport const IS_SUCCESSFUL_LAUNCH = \"isSuccessfulLaunch\";\r\nexport const IS_SUCCESSFUL_LANDING = \"isSuccessfulLanding\";\r\nexport const YEAR = \"year\";\r\nexport const SUCCESSFUL_LANDING = \"Successful Landing\";\r\nexport const SUCCESSFUL_LAUNCH = \"Successful Launch\";","import { useLocation } from \"react-router-dom\";\r\nimport { SPACEX_ENDPOINT } from \"../constants\"\r\n\r\nexport const urlGenerator = ({ isSuccessfulLaunch, isSuccessfulLanding, year }) => {\r\n  const createURL = () => {\r\n    let url = SPACEX_ENDPOINT;\r\n    url += isSuccessfulLaunch ? `&launch_success=${isSuccessfulLaunch}` : \"\";\r\n    url += isSuccessfulLanding ? `&land_success=${isSuccessfulLanding}` : \"\";\r\n    url += year ? `&launch_year=${year}` : \"\";\r\n    return url\r\n  }\r\n\r\n  return createURL();\r\n}\r\n\r\nexport const fetchData = (data) => {\r\n  const url = urlGenerator(data);\r\n  if (typeof window !== \"undefined\" && url) {\r\n    data.setApiData({ items: [], url })\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(response => data.setApiData({ items: response, url }))\r\n      .catch(() => data.setError(true))\r\n  }\r\n}\r\n\r\nexport const useSearchParams = () => {\r\n  const searchParams = useLocation().search;\r\n  const location = new URLSearchParams(searchParams);\r\n  return location;\r\n}","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n// HELPERS\r\nimport { useSearchParams } from \"../helpers\";\r\n\r\n// CONSTANTS\r\nimport {\r\n  IS_SUCCESSFUL_LANDING,\r\n  IS_SUCCESSFUL_LAUNCH,\r\n  YEAR\r\n} from \"../constants\";\r\n\r\n// CSS\r\nimport \"./Button.css\";\r\n\r\nexport default function Button({ data, filterType }) {\r\n  const history = useHistory();\r\n  const location = useSearchParams();\r\n\r\n  const navigate = () => {\r\n    const urlObj = new URL(window.location.href)\r\n    if (\r\n      filterType === IS_SUCCESSFUL_LANDING &&\r\n      data !== location.get(IS_SUCCESSFUL_LANDING)\r\n    ) {\r\n      urlObj.searchParams.set(IS_SUCCESSFUL_LANDING, data)\r\n    } else if (\r\n      filterType === IS_SUCCESSFUL_LAUNCH &&\r\n      data !== location.get(IS_SUCCESSFUL_LAUNCH)\r\n    ) {\r\n      urlObj.searchParams.set(IS_SUCCESSFUL_LAUNCH, data)\r\n    } else if (\r\n      filterType === YEAR &&\r\n      data !== location.get(YEAR)\r\n    ) {\r\n      urlObj.searchParams.set(YEAR, data)\r\n    }\r\n    history.push(`/${urlObj.search}`)\r\n  }\r\n  return (\r\n    <div\r\n      className={`filter-button ${location.get(filterType) === data ? \"active\" : \"\"}`}\r\n      onClick={navigate}\r\n    >\r\n      {data}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\n// CONSTANTS\r\nimport { YEARS, YEAR } from \"../../constants\";\r\n\r\n// CSS\r\nimport \"./LaunchYearFilter.css\";\r\n\r\n// COMPONENTS\r\nimport Button from \"../Button\";\r\n\r\n\r\nexport default function LaunchYearFilter() {\r\n  const years = new Array(YEARS[1] - YEARS[0])\r\n    .fill(YEARS[0])\r\n    .map((year, i) => year + i);\r\n  return (\r\n    <div className=\"launch-year-filter\">\r\n      <h3>Launch year</h3>\r\n\r\n      <hr />\r\n\r\n      <div className=\"years-container\">\r\n        {years.map(year => {\r\n          return (\r\n            <Button\r\n              data={`${year}`}\r\n              key={year}\r\n              filterType={YEAR}\r\n            />\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\n// CONSTANTS\r\nimport {\r\n  IS_SUCCESSFUL_LANDING,\r\n  IS_SUCCESSFUL_LAUNCH,\r\n  SUCCESSFUL_LANDING\r\n} from '../../constants';\r\n\r\n// CSS\r\nimport \"./BooleanFilter.css\";\r\n\r\n// COMPONENTS\r\nimport Button from \"../Button\";\r\n\r\nexport default function BooleanFilter({ type }) {\r\n  return (\r\n    <div className=\"launch-year-filter\">\r\n      <h3>{type}</h3>\r\n\r\n      <hr />\r\n\r\n      <div className=\"boolean-container\">\r\n        <Button\r\n          data={\"true\"}\r\n          filterType={\r\n            type === SUCCESSFUL_LANDING ? IS_SUCCESSFUL_LANDING : IS_SUCCESSFUL_LAUNCH\r\n          }\r\n        />\r\n        <Button\r\n          data={\"false\"}\r\n          filterType={\r\n            type === SUCCESSFUL_LANDING ? IS_SUCCESSFUL_LANDING : IS_SUCCESSFUL_LAUNCH\r\n          }\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\n\r\n// CONSTANTS\r\nimport { SUCCESSFUL_LANDING, SUCCESSFUL_LAUNCH } from \"../../constants\";\r\n\r\n//CSS\r\nimport './Filter.css';\r\n\r\n// COMPONENTS\r\nimport LaunchYearFilter from \"./LaunchYearFilter\";\r\nimport BooleanFilter from \"./BooleanFilter\";\r\n\r\nconst Filter = () => {\r\n  return (\r\n    <section className=\"filter-container\">\r\n      <h2>Filters</h2>\r\n      <LaunchYearFilter />\r\n      <BooleanFilter\r\n        type={SUCCESSFUL_LAUNCH}\r\n      />\r\n      <BooleanFilter\r\n        type={SUCCESSFUL_LANDING}\r\n      />\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Filter;","import React from 'react';\r\n\r\nimport \"./Card.css\";\r\n\r\nexport default function Card({ data }) {\r\n  if (!data || typeof data !== \"object\") {\r\n    return null\r\n  }\r\n  return (\r\n    <div className=\"card\">\r\n      {data.links &&\r\n        data.links.mission_patch_small &&\r\n        <img loading=\"lazy\" src={data.links.mission_patch_small} alt={data.mission_name} />}\r\n\r\n      {data.mission_name && data.flight_number && <h4>{`${data.mission_name} #${data.flight_number}`}</h4>}\r\n\r\n      {data.mission_id && data.mission_id.length ? (\r\n        <div className=\"misson-id-container\">\r\n          <p className=\"key\">Mission Ids:</p>\r\n          <ul>\r\n            {data.mission_id.map(id => {\r\n              return <li key={id}>{id}</li>\r\n            })}\r\n          </ul>\r\n        </div>\r\n      ) : null}\r\n\r\n      {data.launch_year ? (\r\n        <div className=\"row\">\r\n          <p className=\"key\">Launch Year:</p>\r\n          <p className=\"value\">{data.launch_year}</p>\r\n        </div>\r\n      ) : null}\r\n\r\n      <div className=\"row\">\r\n        <p className=\"key\">Successful Launch:</p>\r\n        <p className=\"value\">{JSON.stringify(!!data.launch_success)}</p>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <p className=\"key\">Successful Landing:</p>\r\n        <p className=\"value\">{JSON.stringify(!!data.launch_landing)}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react';\n\n// HELPERS\nimport { fetchData, useSearchParams } from './helpers';\n\n// CONSTANTS\nimport { IS_SUCCESSFUL_LANDING, IS_SUCCESSFUL_LAUNCH, YEAR } from './constants';\n\n// CSS\nimport './App.css';\n\n// COMPONENTS\nimport Filter from './components/filters/Filter';\nimport Card from './components/Card';\n\nexport const getQueryData = location => {\n  return ({\n    [IS_SUCCESSFUL_LANDING]: location.get(IS_SUCCESSFUL_LANDING),\n    [IS_SUCCESSFUL_LAUNCH]: location.get(IS_SUCCESSFUL_LAUNCH),\n    [YEAR]: location.get(YEAR)\n  })\n}\n\nfunction App({ data, reqObj = {} }) {\n  let currentURL;\n  let location = useSearchParams();\n\n  let obj = {};\n  if (!reqObj.isServer) {\n    obj = { ...reqObj, ...window.__PRELOADED_STATE__ }\n    currentURL = window.location.href;\n  }\n\n  const [apiData, setApiData] = useState(obj.data || data || { items: [], url: null })\n  const [error, setError] = useState(null)\n  const [queryParams, setQueryParams] = useState(getQueryData(location))\n\n  useEffect(() => {\n    setQueryParams(getQueryData(location))\n  }, [currentURL])\n\n  useEffect(() => {\n    if (apiData.url !== currentURL) {\n      fetchData({ setApiData, setError, ...queryParams })\n    }\n  }, [queryParams, currentURL, apiData])\n\n  if (error) {\n    return <div>Something went wrong</div>\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>SpaceX Launch Programs</h3>\n      </header>\n      <main>\n        <Filter />\n        <section className=\"card-container\">\n          {apiData.items.length ? apiData.items.map(item => {\n            return <Card data={item} key={item.flight_number} />\n          }) : <p className=\"no-data\">No Missions</p>}\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst root = document.querySelector(\"#root\");\n\nif (root.hasChildNodes() === true) {\n  ReactDOM.hydrate(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n    root);\n} else {\n  ReactDOM.render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n    root);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}