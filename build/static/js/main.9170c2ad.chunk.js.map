{"version":3,"sources":["constants/index.js","helpers/index.js","App.js","serviceWorker.js","index.js"],"names":["SPACEX_ENDPOINT","YEARS","IS_SUCCESSFUL_LAUNCH","IS_SUCCESSFUL_LANDING","YEAR","getCookie","cookieName","name","ca","decodeURIComponent","document","cookie","split","i","length","c","charAt","substring","indexOf","setCookie","cookieValue","urlGenerator","isSuccessfulLaunch","isSuccessfulLanding","year","isServer","createURL","url","Filter","lazy","Card","App","data","reqObj","obj","window","__PRELOADED_STATE__","useState","items","setItems","error","setError","triggerApi","useCallback","fetch","then","response","json","catch","fetchData","fallback","className","map","item","key","flight_number","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9170c2ad.chunk.js","sourcesContent":["export const SPACEX_ENDPOINT = 'https://api.spacexdata.com/v3/launches?limit=100';\r\nexport const YEARS = [2006, 2021]; // [start, end]\r\nexport const IS_SUCCESSFUL_LAUNCH = \"isSuccessfulLaunch\";\r\nexport const IS_SUCCESSFUL_LANDING = \"isSuccessfulLanding\";\r\nexport const YEAR = \"year\";","import { SPACEX_ENDPOINT, IS_SUCCESSFUL_LANDING, IS_SUCCESSFUL_LAUNCH, YEAR } from \"../constants\"\r\n\r\nconst getCookie = cookieName => {\r\n  let name = cookieName + \"=\";\r\n  let decodedCookie = decodeURIComponent(document.cookie);\r\n  let ca = decodedCookie.split(';');\r\n  for (let i = 0; i < ca.length; i++) {\r\n    let c = ca[i];\r\n    while (c.charAt(0) === ' ') {\r\n      c = c.substring(1);\r\n    }\r\n    if (c.indexOf(name) === 0) {\r\n      return c.substring(name.length, c.length);\r\n    }\r\n  }\r\n  return \"\";\r\n}\r\n\r\nconst setCookie = ({ cookieName, cookieValue }) => {\r\n  if (cookieValue !== null) {\r\n    document.cookie = `${cookieName}=${cookieValue};`;\r\n  }\r\n}\r\n\r\nexport const urlGenerator = ({ isSuccessfulLaunch, isSuccessfulLanding, year, isServer }) => {\r\n  const createURL = () => {\r\n    let url = SPACEX_ENDPOINT;\r\n    url += isSuccessfulLaunch ? `&launch_success=${isSuccessfulLaunch}` : \"\";\r\n    url += isSuccessfulLanding ? `&land_success=${isSuccessfulLanding}` : \"\";\r\n    url += year ? `&launch_year=${year}` : \"\";\r\n    return url\r\n  }\r\n\r\n  if (\r\n    !isServer &&\r\n    (isSuccessfulLaunch !== getCookie(IS_SUCCESSFUL_LAUNCH) ||\r\n      isSuccessfulLanding !== getCookie(IS_SUCCESSFUL_LANDING) ||\r\n      year !== getCookie(YEAR))\r\n  ) {\r\n    setCookie({ cookieName: IS_SUCCESSFUL_LAUNCH, cookieValue: isSuccessfulLaunch })\r\n    setCookie({ cookieName: IS_SUCCESSFUL_LANDING, cookieValue: isSuccessfulLanding })\r\n    setCookie({ cookieName: YEAR, cookieValue: year })\r\n    const url = createURL()\r\n    return url;\r\n  } else if (isServer) {\r\n    const url = createURL()\r\n    return url;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport const fetchData = (data) => {\r\n  if (typeof window !== \"undefined\" && urlGenerator(data)) {\r\n    fetch(urlGenerator(data))\r\n      .then(response => response.json())\r\n      .then(response => data.setItems(response))\r\n      .catch(() => data.setError(true))\r\n  }\r\n}","import React, { useState, useCallback, lazy, Suspense } from 'react';\n\n// HELPERS\nimport { fetchData } from './helpers';\n\n// CSS\nimport './App.css';\n\n// COMPONENTS\nconst Filter = lazy(() => import('./components/filters/Filter'));\nconst Card = lazy(() => import('./components/Card'));\n\nfunction App({ data, reqObj = {} }) {\n  let obj = {};\n  if (!reqObj.isServer) {\n    obj = { ...reqObj, ...window.__PRELOADED_STATE__ }\n  }\n\n  const [items, setItems] = useState(obj.data || data || [])\n  const [error, setError] = useState(false)\n\n  const triggerApi = useCallback(\n    (data) => {\n      fetchData({ ...data, setItems, setError })\n    },\n    [],\n  )\n\n  if (error) {\n    return <div>Something went wrong!</div>\n  }\n\n  return (\n    <Suspense fallback={() => <p>Loading</p>}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h3>SpaceX Launch Programs</h3>\n        </header>\n        <main>\n          <Filter triggerApi={triggerApi} reqObj={reqObj} />\n          <section className=\"card-container\">\n            {items.length ? items.map(item => {\n              return <Card data={item} key={item.flight_number} />\n            }) : <p className=\"no-data\">Loading...</p>}\n          </section>\n        </main>\n      </div>\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}